//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public ThreeTypesOfDiabetesGameLoadSpriteListenerComponent threeTypesOfDiabetesGameLoadSpriteListener { get { return (ThreeTypesOfDiabetesGameLoadSpriteListenerComponent)GetComponent(GameComponentsLookup.ThreeTypesOfDiabetesGameLoadSpriteListener); } }
    public bool hasThreeTypesOfDiabetesGameLoadSpriteListener { get { return HasComponent(GameComponentsLookup.ThreeTypesOfDiabetesGameLoadSpriteListener); } }

    public void AddThreeTypesOfDiabetesGameLoadSpriteListener(System.Collections.Generic.List<IThreeTypesOfDiabetesGameLoadSpriteListener> newValue) {
        var index = GameComponentsLookup.ThreeTypesOfDiabetesGameLoadSpriteListener;
        var component = (ThreeTypesOfDiabetesGameLoadSpriteListenerComponent)CreateComponent(index, typeof(ThreeTypesOfDiabetesGameLoadSpriteListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceThreeTypesOfDiabetesGameLoadSpriteListener(System.Collections.Generic.List<IThreeTypesOfDiabetesGameLoadSpriteListener> newValue) {
        var index = GameComponentsLookup.ThreeTypesOfDiabetesGameLoadSpriteListener;
        var component = (ThreeTypesOfDiabetesGameLoadSpriteListenerComponent)CreateComponent(index, typeof(ThreeTypesOfDiabetesGameLoadSpriteListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveThreeTypesOfDiabetesGameLoadSpriteListener() {
        RemoveComponent(GameComponentsLookup.ThreeTypesOfDiabetesGameLoadSpriteListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherThreeTypesOfDiabetesGameLoadSpriteListener;

    public static Entitas.IMatcher<GameEntity> ThreeTypesOfDiabetesGameLoadSpriteListener {
        get {
            if (_matcherThreeTypesOfDiabetesGameLoadSpriteListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ThreeTypesOfDiabetesGameLoadSpriteListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherThreeTypesOfDiabetesGameLoadSpriteListener = matcher;
            }

            return _matcherThreeTypesOfDiabetesGameLoadSpriteListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddThreeTypesOfDiabetesGameLoadSpriteListener(IThreeTypesOfDiabetesGameLoadSpriteListener value) {
        var listeners = hasThreeTypesOfDiabetesGameLoadSpriteListener
            ? threeTypesOfDiabetesGameLoadSpriteListener.value
            : new System.Collections.Generic.List<IThreeTypesOfDiabetesGameLoadSpriteListener>();
        listeners.Add(value);
        ReplaceThreeTypesOfDiabetesGameLoadSpriteListener(listeners);
    }

    public void RemoveThreeTypesOfDiabetesGameLoadSpriteListener(IThreeTypesOfDiabetesGameLoadSpriteListener value, bool removeComponentWhenEmpty = true) {
        var listeners = threeTypesOfDiabetesGameLoadSpriteListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveThreeTypesOfDiabetesGameLoadSpriteListener();
        } else {
            ReplaceThreeTypesOfDiabetesGameLoadSpriteListener(listeners);
        }
    }
}
